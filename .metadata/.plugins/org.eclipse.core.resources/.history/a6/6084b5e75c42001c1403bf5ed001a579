package java2Blog;

import java.util.HashSet;
import java.util.Set;

//Count number of occurrences (or frequency) of each element in a sorted array

public class Program25 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		int[] arr = {2, 2, 2, 3, 3, 4, 5, 5, 6, 6};
		
		Set<Integer> processed = new HashSet<Integer>();
		
		int elem = 4;
		
		int len = arr.length;
		
		for(int i=0; i<len;i++) {
			if(!processed.contains(arr[i])) {
				System.out.println(arr[i]+ " is repeated "+getOccurence(arr, i, len-1, elem)+ " times. for index "+i);
				processed.add(arr[i]);
			}
		}
		int res = getOccurence(arr, 0, len-1, 2);
//		
//		//int res = solveRecursive(0, 9, arr, 2);
//		
		System.out.println("Occurence for 2 is "+getOccurence(arr, 0, len-1, 2));
		System.out.println("Occurence for 3 is "+getOccurence(arr, 0, len-1, 2));
		System.out.println("Occurence for 4 is "+getOccurence(arr, 0, len-1, 2));
		System.out.println("Occurence for 5 is "+getOccurence(arr, 0, len-1, 2));
		System.out.println("Occurence for 6 is "+getOccurence(arr, 0, len-1, 2));
		

	}
	
	static int getOccurence(int[] arr, int l, int r, int elem) {
		
		
		if(l==r) {
			if (arr[l] == elem && arr[r] == elem) {
                return 1;
            } else {
                return 0;
            }
		}else if((arr[l] == elem) && (arr[r] == elem)) {
			return r-l+1;
		}else {
			int mid = (l+r)/2;
			return getOccurence(arr, l, mid, elem) + getOccurence(arr, mid+1, r, elem);
//			int leftRes = getOccurence(arr, l, mid, elem);
//			int rightRes = getOccurence(arr, mid+1, r, elem);
//			
//			return leftRes + rightRes;
		}
	}

	public static int solveRecursive(int start, int end, int[] arr, int element) {
        /* if start is greater than n, we need to return because this 
          represent a subarray of negative size.*/
        if (start > end) {
            return 0;
        }
 
        /* this means that the size of the virtual subarray is one, 
         * and it has only single element. */
        if (start == end) {
            /* now if this single element is equal to the element 
             * whose frequency we are finding out, 
             * then it will contribute one for its total frequency 
             * in the whole array. */
            if (arr[start] == element && arr[end] == element) {
                return 1;
            } else {
                return 0;
            }
        }
 
        /* if the virtual subarray is of size greater than one, 
         * and the elements at start and at the end are equal, 
         * this means that whole array consists of 
         * that element only, as the array 
         * we are working on is already sorted.*/
        if (arr[start] == element && arr[end] == element) {
            return (end - start + 1);
        }
 
        int mid = (start + end) / 2;
        /* call for left side virtual subarray */
        int leftResult = solveRecursive(start, mid, arr, element);
 
        /* call for right side virtual subarray.*/
        int rightResult = solveRecursive(mid + 1, end, arr, element);
 
        /* our result will be calculated in postorder, 
         * which will be left side result 
         * plus the right side sum.*/
        return leftResult + rightResult;
    }

}
